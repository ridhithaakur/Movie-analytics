# -*- coding: utf-8 -*-
"""Assignment3.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lvqaQgbUINuePt4smqkitjHsO_LoXazb
"""

# Movie analysis with user's choice

import json,requests,nltk, matplotlib.pyplot as plt, requests, textblob, wordcloud,skimage.io 

nltk.download("punkt")
nltk.download("averaged_perceptron_tagger")


repeat = "yes"

print ("Welcome to the movie analytics tool!")

#Ecception handling

try:   

  while repeat.lower().strip() == "yes": # This will turn the inputs like YES, Yes, yeS etc, into lower case
#user input
       base_url = "&t="
       second_url = "http://www.omdbapi.com/?i=tt3896198&apikey=523d8e8b"
       movie = input("What movie would you like to analyse ")
       full_url = second_url + base_url + movie
       response = requests.get(full_url)
       choice = input ("What would you like to see (background/reception/poster/wordcloud/sentiment)?")
#to spellcheck and correct the spelling mistakes in user's input
       blob = textblob.TextBlob(choice)
       blob_fix = blob.correct()
       print(blob_fix)
       
       choice_url= second_url + choice
       response1 = requests.get(choice_url)
       
       img_url=("https://dgoldberg.sdsu.edu/515/imdb/")
       imdb = img_url + movie + ".json"
       response2= requests.get(imdb)
       



# Prints the background of the user's desired movie
       if blob_fix.lower() == "background".lower(): #converts the user input correct spelling into lower case
         
         data = json.loads(response.text) #loading the data 
         year = data["Year"]
         rating = data["Rated"]
         runtime = data["Runtime"]
         genre = data["Genre"]
         actors = data["Actors"]
         plot = data["Plot"]

         print("Year:",year)
         print("Rating:",rating)
         print("Genre:",genre)
         print("Actors:",actors)
         print("Plot:", plot)
         
          
# Prints the reception of the user's desired movie
       elif blob_fix.lower() == "reception".lower(): #converts the user input correct spelling into lower case
          
          data = json.loads(response.text)#loading the data 
          awards = data["Awards"]
          metascore = data["Metascore"]
          imdbrating = data["imdbRating"]
          print("Awards:", awards)
          print("Metascore:", metascore)
          print("Imdb Rating", imdbrating)

#Displays the movie poster
       elif blob_fix.lower() == "poster".lower():
          
          data = json.loads(response.text)
          poster = data["Poster"]
          url = poster
          
          image = skimage.io.imread(poster) 
          plt.imshow(image, interpolation = "bilinear") 
          plt.axis("off") 
          plt.show() 

#Displays  a wordcloud for the imdb reviews

       elif blob_fix.lower() == "wordcloud".lower(): #converts the user input correct spelling into lower case
       
          data = json.loads(response2.text)#loading the data 
          cloud = wordcloud.WordCloud()
          cloud.generate(response2.text)

          plt.imshow(cloud, interpolation = "bilinear")
          plt.axis("off")
          plt.show()



#to perform the sentimental analysis of the ratings of the movie
       elif blob_fix.lower() == "sentiment".lower(): #converts the user input correct spelling into lower case
          
          blob = textblob.TextBlob(response2.text)
          
          
          print("Average IMDb review polarity:", blob.polarity)
          print("Average IMDb review polarity:", blob.subjectivity)

       else: 
          print("Sorry, that analysis is not supported. Please try again. ")
       repeat = input("Would you like to run another analysis (yes/no)? ")

#exception 
except ValueError:
    print("Sorry, you entered an invalid value.")

except Exception as e:
    print("Sorry, an unexpected error occurred.")
    print(e)
